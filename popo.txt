You have a message : PING 127.0.0.1 from user42___ socket n° 9
Je suis dans Checkformat SUCCESS
cmd == PING
params == 127.0.0.1
To client: :user42___!user42___@adaloui.42.fr PONG user42___ :127.0.0.1 

You have a message : MODE #lol b from user42___ socket n° 9
Je suis dans Checkformat SUCCESS
cmd == MODE
params == #lol
params == b
You have a message : OPER oper 1234 from user42 socket n° 10
Je suis dans Checkformat SUCCESS
cmd == OPER
params == oper
params == 1234
To client: :user42!user42@adaloui.42.fr 381 user42 :You are now an IRC operator
You have a message : OPER oper 1234 from user42_ socket n° 11
Je suis dans Checkformat SUCCESS
cmd == OPER
params == oper
params == 1234
To client: :user42_!user42_@adaloui.42.fr 381 user42_ :You are now an IRC operator
You have a message : wallops :salut from user42_ socket n° 11
Je suis dans Checkformat SUCCESS
cmd == wallops
params == :salut
Je suis dans WALLOPS normal
Je suis dans WALLOPS
You have a message : PING 127.0.0.1 from user42 socket n° 10
Je suis dans Checkformat SUCCESS
cmd == PING
params == 127.0.0.1
To client: :user42!user42@adaloui.42.fr PONG user42 :127.0.0.1 

You have a message : PING 127.0.0.1 from user42__ socket n° 8
Je suis dans Checkformat SUCCESS
cmd == PING
params == 127.0.0.1
To client: :user42__!user42__@adaloui.42.fr PONG user42__ :127.0.0.1 

You have a message : PING 127.0.0.1 from user42_ socket n° 11
Je suis dans Checkformat SUCCESS
cmd == PING
params == 127.0.0.1
To client: :user42_!user42_@adaloui.42.fr PONG user42_ :127.0.0.1 

You have a message : PING 127.0.0.1 from user42___ socket n° 9
Je suis dans Checkformat SUCCESS
cmd == PING
params == 127.0.0.1
To client: :user42___!user42___@adaloui.42.fr PONG user42___ :127.0.0.1 

You have a message : JOIN #lol from user42 socket n° 10
Je suis dans Checkformat SUCCESS
cmd == JOIN
params == #lol
==6961== Invalid read of size 8
==6961==    at 0x4F65187: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==6961==    by 0x114526: Clients::GetClientsNickname[abi:cxx11]() (Clients.cpp:110)
==6961==    by 0x127428: Channels::AddClientsToChannelMemberList(Clients*) (Channels.cpp:84)
==6961==    by 0x11FF12: MyMsg::JoinCmd(MyServer*) (MyMsg.cpp:783)
==6961==    by 0x10EDC6: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:429)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Address 0x5b822a0 is 0 bytes inside a block of size 368 free'd
==6961==    at 0x4C3323B: operator delete(void*) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x11CD95: MyMsg::QuitCmd(MyServer*) (MyMsg.cpp:515)
==6961==    by 0x10ED11: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:421)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Block was alloc'd at
==6961==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x10DC8C: MyServer::CreateClients() (MyServer.cpp:237)
==6961==    by 0x10DA63: MyServer::SelectClients() (MyServer.cpp:207)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961== 
==6961== Invalid read of size 8
==6961==    at 0x4F6518A: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==6961==    by 0x114526: Clients::GetClientsNickname[abi:cxx11]() (Clients.cpp:110)
==6961==    by 0x127428: Channels::AddClientsToChannelMemberList(Clients*) (Channels.cpp:84)
==6961==    by 0x11FF12: MyMsg::JoinCmd(MyServer*) (MyMsg.cpp:783)
==6961==    by 0x10EDC6: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:429)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Address 0x5b822a8 is 8 bytes inside a block of size 368 free'd
==6961==    at 0x4C3323B: operator delete(void*) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x11CD95: MyMsg::QuitCmd(MyServer*) (MyMsg.cpp:515)
==6961==    by 0x10ED11: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:421)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Block was alloc'd at
==6961==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x10DC8C: MyServer::CreateClients() (MyServer.cpp:237)
==6961==    by 0x10DA63: MyServer::SelectClients() (MyServer.cpp:207)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961== 
==6961== Invalid read of size 2
==6961==    at 0x4C38750: memmove (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x4F65156: void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==6961==    by 0x114526: Clients::GetClientsNickname[abi:cxx11]() (Clients.cpp:110)
==6961==    by 0x127428: Channels::AddClientsToChannelMemberList(Clients*) (Channels.cpp:84)
==6961==    by 0x11FF12: MyMsg::JoinCmd(MyServer*) (MyMsg.cpp:783)
==6961==    by 0x10EDC6: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:429)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Address 0x5b822b0 is 16 bytes inside a block of size 368 free'd
==6961==    at 0x4C3323B: operator delete(void*) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x11CD95: MyMsg::QuitCmd(MyServer*) (MyMsg.cpp:515)
==6961==    by 0x10ED11: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:421)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Block was alloc'd at
==6961==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x10DC8C: MyServer::CreateClients() (MyServer.cpp:237)
==6961==    by 0x10DA63: MyServer::SelectClients() (MyServer.cpp:207)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961== 
==6961== Invalid read of size 2
==6961==    at 0x4C3875F: memmove (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x4F65156: void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==6961==    by 0x114526: Clients::GetClientsNickname[abi:cxx11]() (Clients.cpp:110)
==6961==    by 0x127428: Channels::AddClientsToChannelMemberList(Clients*) (Channels.cpp:84)
==6961==    by 0x11FF12: MyMsg::JoinCmd(MyServer*) (MyMsg.cpp:783)
==6961==    by 0x10EDC6: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:429)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Address 0x5b822b4 is 20 bytes inside a block of size 368 free'd
==6961==    at 0x4C3323B: operator delete(void*) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x11CD95: MyMsg::QuitCmd(MyServer*) (MyMsg.cpp:515)
==6961==    by 0x10ED11: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:421)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Block was alloc'd at
==6961==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x10DC8C: MyServer::CreateClients() (MyServer.cpp:237)
==6961==    by 0x10DA63: MyServer::SelectClients() (MyServer.cpp:207)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961== 
Le client = user42 a été ajoutéau channel #lol qui a été crée par == user42 et qui contient les utilisateurs : 
fd = 8 name = user42__
fd = 9 name = user42___
fd = 10 name = user42
To client: :user42!user42@adaloui.42.fr JOIN #lol

Send msgto all = user42__
msg sent in broadcast == :user42!user42@adaloui.42.fr JOIN #lol


msg == user42
FD == 10
Send msgto all = user42___
msg sent in broadcast == :user42!user42@adaloui.42.fr JOIN #lol


msg == user42
FD == 10
==6961== Invalid read of size 4
==6961==    at 0x114384: Clients::GetClientsFd() (Clients.cpp:64)
==6961==    by 0x11F24E: MyMsg::NamesCmd(MyServer*, MyMsg&) (MyMsg.cpp:723)
==6961==    by 0x120131: MyMsg::JoinCmd(MyServer*) (MyMsg.cpp:789)
==6961==    by 0x10EDC6: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:429)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Address 0x5b82320 is 128 bytes inside a block of size 368 free'd
==6961==    at 0x4C3323B: operator delete(void*) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x11CD95: MyMsg::QuitCmd(MyServer*) (MyMsg.cpp:515)
==6961==    by 0x10ED11: MyServer::ExecuteCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:421)
==6961==    by 0x10EB50: MyServer::CheckClientsAuthentification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, MyMsg*) (MyServer.cpp:403)
==6961==    by 0x10E789: MyServer::RecvClientsMsg(int) (MyServer.cpp:327)
==6961==    by 0x10DB67: MyServer::SelectClients() (MyServer.cpp:214)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961==  Block was alloc'd at
==6961==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6961==    by 0x10DC8C: MyServer::CreateClients() (MyServer.cpp:237)
==6961==    by 0x10DA63: MyServer::SelectClients() (MyServer.cpp:207)
==6961==    by 0x10B5CC: main (main.cpp:78)
==6961== 




















/**************************************************************\
|**************************************************************|
\**************************************************************/
int	MyMsg::NickCmd( MyServer *IRC_Server )
{
	std::string str;
	Clients* const client = this->_SentFrom;

	if (this->Params.size() > 1 || this->Params.size() == 0)
		str = ERR_NONICKNAMEGIVEN();
	else
	{
		std::string new_nick = this->Params[0];
		if (new_nick.length() > 9 || new_nick.length() <= 0 || this->NickFormatCheck(new_nick) == FAILURE)
			str = ERR_ERRONEUSNICKNAME(*this);
		else if (IRC_Server->GetClientsThroughName(new_nick) != NULL)
			str = ERR_NICKNAMEINUSE(*this);
		else if (IRC_Server->GetClientsThroughName(new_nick) == NULL && this->NickFormatCheck(new_nick) == SUCCESS \
		&& client->GetClientsNickname().size() == 0)
		{
			str = this->Prefix + " " + "NICK " + new_nick;
			client->SetClientsNickname(new_nick);
			send(client->GetClientsFd(), str.c_str(), strlen(str.c_str()), MSG_DONTWAIT);
			client->SetClientsConnectionNickCmd(YES);
			if (client->GetClientsConnectionUserCmd() == YES && client->GetClientsConnectionNickCmd() == YES && client->GetClientsConnectionAuthorisation() == YES \
				&& client->GetClientsConnectionPermission() == NO)
					ValidateClientsConnections();
			return (SUCCESS);
		}
		else if (IRC_Server->GetClientsThroughName(new_nick) == NULL && this->NickFormatCheck(new_nick) == SUCCESS \
		&& client->GetClientsNickname().size() != 0)
		{
			std::string str2;
			str2 = this->Prefix + " " + "NICK " + new_nick;
			str = "NICK ";
			str += new_nick;
			std::map<Channels*, std::string>::iterator it;
			it = IRC_Server->channels_list.begin();
			while (it != IRC_Server->channels_list.end())
			{
				if (it->first->GetClientsInChannelMemberList(client->GetClientsNickname()) != NULL)
					it->first->SendMsgToAllInChannels(this, str, client);
				it++;
			}
			send(client->GetClientsFd(), str2.c_str(), strlen(str2.c_str()), MSG_DONTWAIT);
			client->SetClientsNickname(new_nick);
		}
		send(client->GetClientsFd(), str.c_str(), strlen(str.c_str()), MSG_DONTWAIT);

	}
	
	return (SUCCESS);
}




-------------------------------------------------------
int			MyMsg::UserCmd( MyServer *IRC_Server )
{
	std::string			str;
	Clients* const		client = this->_SentFrom;

	if (this->Params.size() < 4)
	{
		str = this->Prefix + " ";
		str += ERR_NEEDMOREPARAMS(*this);
		send(client->GetClientsFd(), str.c_str(), strlen(str.c_str()), MSG_DONTWAIT);
	}
	else if (client->GetClientsUsername().size())
	{
		str = this->Prefix + " ";
		str += ERR_ALREADYREGISTRED(*this);
		send(client->GetClientsFd(), str.c_str(), strlen(str.c_str()), MSG_DONTWAIT);
	}
	else if (this->Params.size() >= 4)
	{
		std::vector<std::string>::iterator it = this->Params.begin();
		client->SetClientsUsername(*it);
		std::string realname;
		if ((*it)[0] == ':')
			realname = it->substr(1);
		else
			realname = *it;
		while (it != this->Params.end())
		{
			realname += " " + *it;
			it++;
		}
		client->SetClientsRealname(realname);
		this->_SentFrom->SetClientsConnectionUserCmd(YES);
		if (client->GetClientsConnectionUserCmd() == YES && client->GetClientsConnectionNickCmd() == YES && client->GetClientsConnectionAuthorisation() == YES \
			&& client->GetClientsConnectionPermission() == NO)
				ValidateClientsConnections();
	}
	(void)IRC_Server;
	return (SUCCESS);
}
